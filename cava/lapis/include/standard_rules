#define rule library_rule

rule {
    type(pointer(not(transferrable())));
    NOT { type(pointer(pointer(_))); }
} => {
    handle;
}

rule priority 100 {
    type(pointer(_));
    buffer(b@_);
} => if(```b is None or b == 0```) {
    buffer(1);
}

rule priority -100 {
    type(nonconst(pointer(_)));
    type(pointer(nonconst(_)));
    NOT { handle; }
    NOT { input; }
} => {
    output;
}

rule {
    type(const(pointer(_)));
} => {
    output(False);
    input;
}

rule {
    type(pointer(const(_)));
} => {
    output(False);
    input;
}

rule {
    type(pointer(char));
} => {
    buffer(```strlen(ava_self)+1```);
}

rule priority -1000 {
    buffer(b @ _);
} => if (```b is not None and b != 0```) {
    transfer(NW_BUFFER);
}
rule priority -1000 {
    handle;
} => {
    transfer(NW_HANDLE);
}
rule priority -1000 {
    opaque;
} => {
    transfer(NW_OPAQUE);
}

rule priority -1000 {
    async;
} => {
    synchrony(NW_ASYNC);
}
rule priority -1000 {
    sync;
} => {
    synchrony(NW_SYNC);
}

#undef rule